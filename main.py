import asyncio
import os
import random
import sentry_sdk

import uvloop
from pyrogram import Client, idle

from settings.config import WORKING_CLIENTS, BASE_DIR, MY_LOGGER, SENTRY_DSN
from utils.req_to_bot_api import get_active_accounts


async def main(bot_plugins):
    app = Client(name="test_bot", plugins=bot_plugins)
    await app.start()
    MY_LOGGER.success(f'BOT HAS BEEN IN ORBIT...{random.choice(seq=("üõ∞", "üõ∏", "üåå", "üå†", "üë®‚ÄçüöÄ"))}')
    result = await get_active_accounts()    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω—ã

    if not result:
        await app.stop()
        MY_LOGGER.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        return

    await idle()
    await app.stop()

    # –¢–æ—Ä–º–æ–∑–∏–º –∫–ª–∏–µ–Ω—Ç—ã
    for i_acc_pk, i_acc_data in WORKING_CLIENTS.items():
        i_acc_data[0].set()
        await i_acc_data[1]

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
    session_files = os.path.join(BASE_DIR, 'session_files')
    for i_file in os.listdir(session_files):
        session_file_path = os.path.join(BASE_DIR, 'session_files', i_file)
        if os.path.exists(session_file_path):
            os.remove(session_file_path)
            MY_LOGGER.info(f'–§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file_path!r} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –§–°')


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ sentry
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
    )

    try:
        MY_LOGGER.info('BOT IS READY TO LAUNCH!\nstarting the countdown...')
        MY_LOGGER.info('3... SET PATH TO HANDLERS')

        plugins = dict(
            root="handlers",    # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é-–∫–æ—Ä–µ–Ω—å, –≥–¥–µ –ª–µ–∂–∞—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            include=[   # –Ø–≤–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º
                "main_handlers",
                "accounts_management_handlers",
            ]
        )  # –ü—É—Ç—å –ø–∞–∫–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏

        MY_LOGGER.info('2... DO SOMETHING ELSE')
        # scheduler = AsyncIOScheduler()
        # scheduler.add_job(job, "interval", seconds=3)
        # scheduler.start()
        # ANY_ENTITIES_STORAGE['scheduler'] = scheduler

        MY_LOGGER.info('1... BOT SPEED BOOST')
        uvloop.install()  # –≠—Ç–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

        MY_LOGGER.info('LAUNCH THIS FU... BOT NOW!!!')
        asyncio.run(main(bot_plugins=plugins))
        # Client("test_bot", plugins=plugins).run()

    except (KeyboardInterrupt, SystemExit):
        MY_LOGGER.warning('BOT STOPPED BY CTRL+C!')
    # except Exception as error:
    #     MY_LOGGER.error(f'BOT CRASHED WITH SOME ERROR\n\t{error}\n{error.args}')
